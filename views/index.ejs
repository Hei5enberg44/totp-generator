<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/@tabler/core@1.0.0-beta10/dist/css/tabler.min.css">
    <title>Générer un nouveau code TOTP</title>
</head>
<body class="border-top-wide border-primary d-flex flex-column">
    <div class="page page-center">
        <div class="container-tight py-4">
            <div class="card card-md">
                <div class="card-body">
                    <div class="text-center">
                        <div class="card-title mb-3">Générer un nouveau code TOTP</div>
                    
                        <div class="input-group">
                            <span class="input-group-text">Nom</span>
                            <input type="text" class="form-control form-control-sm" id="name" autocomplete="off">
                            <button class="btn btn-primary btn-sm" onclick="generateTOTP()">Générer</button>
                        </div>

                        <div class="d-none" id="totp">
                            <img src="" id="qrcode">

                            <div class="input-group">
                                <span class="input-group-text">Secret</span>
                                <input type="text" class="form-control form-control-sm" id="secret" value="" readonly>
                                <button class="btn btn-white btn-sm align-baseline" onclick="copySecret(this)">Copier</button>
                            </div>
                            <div class="text-muted my-3">Scannez cette image avec votre application 2FA. Vous verrez un code à 6 chiffres sur votre écran. Entrez ce code ci-dessous pour vérifier votre téléphone et compléter l'authentification.</div>

                            <div class="mb-3 d-flex justify-content-center">
                                <div class="input-group w-50">
                                    <span class="input-group-text">Code</span>
                                    <input type="text" id="token" class="form-control text-center">
                                </div>
                            </div>

                            <button class="btn btn-primary w-100" onclick="validateToken()">Tester</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://unpkg.com/@tabler/core@1.0.0-beta10/dist/js/tabler.min.js"></script>
    <script src="https://unpkg.com/imask"></script>

    <script>
        const $name = document.querySelector('#name')
        const $totp = document.querySelector('#totp')
        const $qrcode = document.querySelector('#qrcode')
        const $secret = document.querySelector('#secret')
        const $input = document.querySelector('#token')

        const $token = IMask($input, {
            mask: '000 000'
        })

        function generateTOTP() {
            const name = $name.value

            if(name !== '') {
                $name.classList.remove('is-invalid')

                new Promise(async (resolve, reject) => {
                    try {
                        const request = await fetch(`/generateTOTP?name=${encodeURIComponent(name)}`, {
                            method: 'GET'
                        })

                        if(request.ok) {
                            const response = await request.json()
                            $input.classList.remove('is-invalid')
                            resolve(response)
                        } else {
                            $input.classList.remove('is-invalid')
                            reject()
                        }
                    } catch(err) {
                        reject(err)
                    }
                }).then(totp => {
                    $qrcode.setAttribute('src', totp.qrcode)
                    $secret.value = totp.secret
                    $totp.classList.remove('d-none')
                }).catch(err => {
                    $input.classList.add('is-invalid')
                })
            } else {
                $name.classList.add('is-invalid')
            }
        }

        function copySecret($btn) {
            $secret.select()
            document.execCommand('copy')

            const oldValue = $btn.innerText
            $btn.innerText = 'Copié !'
            setTimeout(function() {
                $btn.innerText = oldValue
            }, 1000)
        }

        function validateToken() {
            const token = $token.unmaskedValue
            const secret = $secret.value

            new Promise(async (resolve, reject) => {
                try {
                    const request = await fetch('http://totp.weezle.xyz/validateToken', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            token: token,
                            secret: secret
                        })
                    })

                    if(request.ok) {
                        const response = await request.json()
                        if(response.valid) {
                            $input.classList.remove('is-invalid')
                            $input.classList.add('is-valid')
                        } else {
                            $input.classList.add('is-invalid')
                        }
                        resolve()
                    } else {
                        $input.classList.add('is-invalid')
                        reject()
                    }
                } catch(err) {
                    $input.classList.add('is-invalid')
                    reject(err)
                }
            })
        }
    </script>
</body>
</html>